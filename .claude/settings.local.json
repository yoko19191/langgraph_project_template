{
  "permissions": {
    "allow": [
      "Bash(python -m ruff:*)",
      "Bash(python -m mypy src/app/common/models/chat_models.py)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=. python:*)",
      "Bash(uv add langchain-openai)",
      "Bash(tree:*)",
      "Bash(xargs:*)",
      "WebFetch(domain:docs.siliconflow.cn)",
      "WebFetch(domain:doc.dmxapi.cn)",
      "Bash(ruff check:*)",
      "Bash(ruff format:*)",
      "Bash(PYTHONPATH=src python tests/test_mcp_config.py)",
      "Bash(uv run pytest:*)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py -v -s)",
      "Bash(uv add --dev pytest-asyncio)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientAsync::test_async_get_all_mcp_tools -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientDirect::test_direct_client_usage -v -s --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientAsync::test_async_get_mcp_tools -v -s --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientSync::test_get_mcp_tools_sync -v -s --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py -v --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientSync -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientSync::test_get_mcp_prompts_sync -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientAsync::test_aget_mcp_prompts -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientSync::test_get_mcp_resources_sync -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/tools/test_mcp.py::TestMCPClientAsync::test_aget_mcp_resources -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/app/common/utils/test_logging.py -v)",
      "Bash(cat src/logs/app_20251010_165001.log)",
      "mcp__serena__read_memory",
      "mcp__serena__read_file",
      "mcp__serena__find_file",
      "mcp__serena__list_dir",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__replace_regex",
      "WebFetch(domain:docs.langchain.com)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__create_text_file",
      "mcp__serena__execute_shell_command",
      "mcp__serena__search_for_pattern"
    ],
    "deny": [],
    "ask": []
  }
}
